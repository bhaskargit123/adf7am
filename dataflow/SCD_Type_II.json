{
	"name": "SCD_Type_II",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "ls_azSQL_SOURCE",
						"type": "LinkedServiceReference"
					},
					"name": "srcCustomer"
				},
				{
					"linkedService": {
						"referenceName": "ls_azSQL_TARGET",
						"type": "LinkedServiceReference"
					},
					"name": "trgCustomer"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "srcSelect"
				},
				{
					"name": "lookup1"
				},
				{
					"name": "IsInsertedORExisted"
				},
				{
					"name": "split1"
				},
				{
					"name": "trgSelect"
				}
			],
			"scriptLines": [
				"source(output(",
				"          CustomerId as integer,",
				"          Name as string,",
				"          Location as string,",
				"          Sales as decimal(19,4)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'query',",
				"     store: 'sqlserver',",
				"     query: 'SELECT * FROM customer',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> srcCustomer",
				"source(output(",
				"          CustomerKey as integer,",
				"          CustomerId as integer,",
				"          Name as string,",
				"          Location as string,",
				"          Sales as decimal(19,4)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'query',",
				"     store: 'sqlserver',",
				"     query: 'SELECT CustomerKey,CustomerId,Name,Location,Sales FROM customer\\nWHERE EndDate IS NULL',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> trgCustomer",
				"srcCustomer select(mapColumn(",
				"          Src_CustomerId = CustomerId,",
				"          Src_Name = Name,",
				"          Src_Location = Location,",
				"          Src_Sales = Sales",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> srcSelect",
				"srcSelect, trgSelect lookup(Src_CustomerId == trg_CustomerId,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup1",
				"lookup1 derive(IsInsertedORExisted = iif(isNull(trg_CustomerKey), 'NewRecords', 'ExistedRecords')) ~> IsInsertedORExisted",
				"IsInsertedORExisted split(IsInsertedORExisted=='NewRecords',",
				"     IsInsertedORExisted=='ExistedRecords',",
				"     disjoint: false) ~> split1@(NewRecords, ExistedRecords)",
				"trgCustomer select(mapColumn(",
				"          trg_CustomerKey = CustomerKey,",
				"          trg_CustomerId = CustomerId,",
				"          trg_Name = Name,",
				"          trg_Location = Location,",
				"          trg_Sales = Sales",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> trgSelect"
			]
		}
	}
}