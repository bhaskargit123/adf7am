{
	"name": "SCD_Type_1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "ls_azSQL_SOURCE",
						"type": "LinkedServiceReference"
					},
					"name": "srcCustomer"
				},
				{
					"linkedService": {
						"referenceName": "ls_azSQL_TARGET",
						"type": "LinkedServiceReference"
					},
					"name": "trgCustomer"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "ls_azSQL_TARGET",
						"type": "LinkedServiceReference"
					},
					"name": "sink1"
				},
				{
					"linkedService": {
						"referenceName": "ls_azSQL_TARGET",
						"type": "LinkedServiceReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "srcSelect"
				},
				{
					"name": "trgSelect"
				},
				{
					"name": "InsertedFlow"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "RenameSelect"
				},
				{
					"name": "lookup1"
				},
				{
					"name": "filter1"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "select1"
				},
				{
					"name": "alterRow1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          CustomerId as integer,",
				"          Name as string,",
				"          Location as string,",
				"          Sales as decimal(19,4)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'query',",
				"     store: 'sqlserver',",
				"     query: 'SELECT * FROM customer',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> srcCustomer",
				"source(output(",
				"          CustomerId as integer,",
				"          Name as string,",
				"          Location as string,",
				"          Sales as decimal(19,4),",
				"          Flag as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'dbo',",
				"     tableName: 'customer',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> trgCustomer",
				"srcCustomer select(mapColumn(",
				"          src_CustomerId = CustomerId,",
				"          src_Name = Name,",
				"          src_Location = Location,",
				"          src_Sales = Sales",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> srcSelect",
				"trgCustomer select(mapColumn(",
				"          trg_CustomerId = CustomerId,",
				"          trg_Name = Name,",
				"          trg_Location = Location,",
				"          trg_Sales = Sales,",
				"          trg_Flag = Flag",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> trgSelect",
				"srcSelect, trgSelect exists(src_CustomerId == trg_CustomerId,",
				"     negate:true,",
				"     broadcast: 'auto')~> InsertedFlow",
				"InsertedFlow derive(Flag = 0) ~> derivedColumn1",
				"derivedColumn1 select(mapColumn(",
				"          CustomerId = src_CustomerId,",
				"          Name = src_Name,",
				"          Location = src_Location,",
				"          Sales = src_Sales,",
				"          Flag",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RenameSelect",
				"srcSelect, trgSelect lookup(src_CustomerId == trg_CustomerId,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup1",
				"derivedColumn2 filter(IsUpdated==1) ~> filter1",
				"lookup1 derive(IsUpdated = iif(src_Name!=trg_Name ||src_Location!=trg_Location || src_Sales != trg_Sales, 1, 0),",
				"          Flag = 1) ~> derivedColumn2",
				"filter1 select(mapColumn(",
				"          CustomerId = src_CustomerId,",
				"          Name = src_Name,",
				"          Location = src_Location,",
				"          Sales = src_Sales,",
				"          Flag",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 alterRow(updateIf(1==1)) ~> alterRow1",
				"RenameSelect sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'dbo',",
				"     tableName: 'customer',",
				"     insertable: true,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          CustomerId,",
				"          Name,",
				"          Location,",
				"          Sales,",
				"          Flag",
				"     )) ~> sink1",
				"alterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'dbo',",
				"     tableName: 'customer',",
				"     insertable: false,",
				"     updateable: true,",
				"     deletable: false,",
				"     upsertable: false,",
				"     keys:['CustomerId'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink2"
			]
		}
	}
}