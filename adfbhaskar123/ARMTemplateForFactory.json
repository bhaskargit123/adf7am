{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adfbhaskar123"
		},
		"ls_azSQL_SOURCE_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_azSQL_SOURCE'"
		},
		"ls_azSQL_TARGET_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_azSQL_TARGET'"
		},
		"ls_bhaskaradls_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'ls_bhaskaradls'"
		},
		"ls_bhaskaradls_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://bhaskaradls.dfs.core.windows.net/"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES\nWHERE TABLE_TYPE='BASE TABLE'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_SOURCE_Query",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat(\r\n\t'SELECT * FROM ',\r\n\titem().TABLE_NAME\r\n)",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_SOURCE_Query",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_datafiles_output",
											"type": "DatasetReference",
											"parameters": {
												"pFileName": {
													"value": "@concat(\n\titem().TABLE_NAME,\n\t'.csv'\n)",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-02-16T11:07:04Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_SOURCE_Query')]",
				"[concat(variables('factoryId'), '/datasets/ds_datafiles_output')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_scd_type_1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "SCD_Type_1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"srcCustomer": {},
									"trgCustomer": {},
									"sink1": {},
									"sink2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-02-16T00:48:21Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/SCD_Type_1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_scd_type_2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "SCD_Type_II",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"srcCustomer": {},
									"trgCustomer": {},
									"sink1": {},
									"sink2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/SCD_Type_II')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_SOURCE_Query')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_azSQL_SOURCE",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "CustomorID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Name",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "customer"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_azSQL_SOURCE')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_datafiles_output')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_bhaskaradls",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"pFileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().pFileName",
							"type": "Expression"
						},
						"folderPath": "output",
						"fileSystem": "datafiles"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_bhaskaradls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_azSQL_SOURCE')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('ls_azSQL_SOURCE_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_azSQL_TARGET')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('ls_azSQL_TARGET_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_bhaskaradls')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ls_bhaskaradls_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('ls_bhaskaradls_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCD_Type_1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "ls_azSQL_SOURCE",
								"type": "LinkedServiceReference"
							},
							"name": "srcCustomer"
						},
						{
							"linkedService": {
								"referenceName": "ls_azSQL_TARGET",
								"type": "LinkedServiceReference"
							},
							"name": "trgCustomer"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ls_azSQL_TARGET",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						},
						{
							"linkedService": {
								"referenceName": "ls_azSQL_TARGET",
								"type": "LinkedServiceReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "srcSelect"
						},
						{
							"name": "trgSelect"
						},
						{
							"name": "InsertedFlow"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "RenameSelect"
						},
						{
							"name": "lookup1"
						},
						{
							"name": "filter1"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "select1"
						},
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CustomerId as integer,",
						"          Name as string,",
						"          Location as string,",
						"          Sales as decimal(19,4)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT * FROM customer',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> srcCustomer",
						"source(output(",
						"          CustomerId as integer,",
						"          Name as string,",
						"          Location as string,",
						"          Sales as decimal(19,4),",
						"          Flag as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'customer',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> trgCustomer",
						"srcCustomer select(mapColumn(",
						"          src_CustomerId = CustomerId,",
						"          src_Name = Name,",
						"          src_Location = Location,",
						"          src_Sales = Sales",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> srcSelect",
						"trgCustomer select(mapColumn(",
						"          trg_CustomerId = CustomerId,",
						"          trg_Name = Name,",
						"          trg_Location = Location,",
						"          trg_Sales = Sales,",
						"          trg_Flag = Flag",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> trgSelect",
						"srcSelect, trgSelect exists(src_CustomerId == trg_CustomerId,",
						"     negate:true,",
						"     broadcast: 'auto')~> InsertedFlow",
						"InsertedFlow derive(Flag = 0) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          CustomerId = src_CustomerId,",
						"          Name = src_Name,",
						"          Location = src_Location,",
						"          Sales = src_Sales,",
						"          Flag",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RenameSelect",
						"srcSelect, trgSelect lookup(src_CustomerId == trg_CustomerId,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup1",
						"derivedColumn2 filter(IsUpdated==1) ~> filter1",
						"lookup1 derive(IsUpdated = iif(src_Name!=trg_Name ||src_Location!=trg_Location || src_Sales != trg_Sales, 1, 0),",
						"          Flag = 1) ~> derivedColumn2",
						"filter1 select(mapColumn(",
						"          CustomerId = src_CustomerId,",
						"          Name = src_Name,",
						"          Location = src_Location,",
						"          Sales = src_Sales,",
						"          Flag",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 alterRow(updateIf(1==1)) ~> alterRow1",
						"RenameSelect sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'customer',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          CustomerId,",
						"          Name,",
						"          Location,",
						"          Sales,",
						"          Flag",
						"     )) ~> sink1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'customer',",
						"     insertable: false,",
						"     updateable: true,",
						"     deletable: false,",
						"     upsertable: false,",
						"     keys:['CustomerId'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink2"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_azSQL_SOURCE')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_azSQL_TARGET')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCD_Type_II')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "ls_azSQL_SOURCE",
								"type": "LinkedServiceReference"
							},
							"name": "srcCustomer"
						},
						{
							"linkedService": {
								"referenceName": "ls_azSQL_TARGET",
								"type": "LinkedServiceReference"
							},
							"name": "trgCustomer"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ls_azSQL_TARGET",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						},
						{
							"linkedService": {
								"referenceName": "ls_azSQL_TARGET",
								"type": "LinkedServiceReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "srcSelect"
						},
						{
							"name": "lookup1"
						},
						{
							"name": "IsInsertedORExisted"
						},
						{
							"name": "split1"
						},
						{
							"name": "trgSelect"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "Modified"
						},
						{
							"name": "select1"
						},
						{
							"name": "select2"
						},
						{
							"name": "union1"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "select3"
						},
						{
							"name": "derivedColumn3"
						},
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CustomerId as integer,",
						"          Name as string,",
						"          Location as string,",
						"          Sales as decimal(19,4)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT * FROM customer',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> srcCustomer",
						"source(output(",
						"          CustomerKey as integer,",
						"          CustomerId as integer,",
						"          Name as string,",
						"          Location as string,",
						"          Sales as decimal(19,4)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT CustomerKey,CustomerId,Name,Location,Sales FROM customer\\nWHERE EndDate IS NULL',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> trgCustomer",
						"srcCustomer select(mapColumn(",
						"          Src_CustomerId = CustomerId,",
						"          Src_Name = Name,",
						"          Src_Location = Location,",
						"          Src_Sales = Sales",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> srcSelect",
						"srcSelect, trgSelect lookup(Src_CustomerId == trg_CustomerId,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 derive(IsInsertedORExisted = iif(isNull(trg_CustomerKey), 'NewRecords', 'ExistedRecords')) ~> IsInsertedORExisted",
						"IsInsertedORExisted split(IsInsertedORExisted=='NewRecords',",
						"     IsInsertedORExisted=='ExistedRecords',",
						"     disjoint: false) ~> split1@(NewRecords, ExistedRecords)",
						"trgCustomer select(mapColumn(",
						"          trg_CustomerKey = CustomerKey,",
						"          trg_CustomerId = CustomerId,",
						"          trg_Name = Name,",
						"          trg_Location = Location,",
						"          trg_Sales = Sales",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> trgSelect",
						"split1@ExistedRecords derive(IsUpdated = iif(Src_Name!=trg_Name || Src_Location!=trg_Location, 'Yes', 'No')) ~> derivedColumn1",
						"derivedColumn1 filter(IsUpdated=='Yes') ~> Modified",
						"Modified select(mapColumn(",
						"          CustomerId = Src_CustomerId,",
						"          Name = Src_Name,",
						"          Location = Src_Location,",
						"          Sales = Src_Sales",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"split1@NewRecords select(mapColumn(",
						"          CustomerId = Src_CustomerId,",
						"          Name = Src_Name,",
						"          Location = Src_Location,",
						"          Sales = Src_Sales",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2, select1 union(byName: true)~> union1",
						"union1 derive(StartDate = currentDate()) ~> derivedColumn2",
						"Modified select(mapColumn(",
						"          CustomerKey = trg_CustomerKey",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select3",
						"select3 derive(EndDate = currentDate()) ~> derivedColumn3",
						"derivedColumn3 alterRow(updateIf(1==1)) ~> alterRow1",
						"derivedColumn2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'customer',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          CustomerId,",
						"          Name,",
						"          Location,",
						"          Sales,",
						"          StartDate",
						"     )) ~> sink1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'customer',",
						"     insertable: false,",
						"     updateable: true,",
						"     deletable: false,",
						"     upsertable: false,",
						"     keys:['CustomerKey'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          CustomerKey,",
						"          EndDate",
						"     )) ~> sink2"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_azSQL_SOURCE')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_azSQL_TARGET')]"
			]
		}
	]
}